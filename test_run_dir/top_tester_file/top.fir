;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit top : 
  module Pc : 
    input clock : Clock
    input reset : Reset
    output io : {addressout : UInt<32>}
    
    reg counter : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Pc.scala 10:26]
    node _counter_T = add(counter, UInt<3>("h04")) @[Pc.scala 11:25]
    node _counter_T_1 = tail(_counter_T, 1) @[Pc.scala 11:25]
    node _counter_T_2 = div(_counter_T_1, UInt<3>("h04")) @[Pc.scala 11:30]
    counter <= _counter_T_2 @[Pc.scala 11:13]
    io.addressout <= counter @[Pc.scala 12:18]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, inst : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[IM.scala 15:16]
    node _io_inst_T = div(io.addr, UInt<3>("h04")) @[IM.scala 17:31]
    node _io_inst_T_1 = bits(_io_inst_T, 9, 0) @[IM.scala 17:19]
    infer mport io_inst_MPORT = imem[_io_inst_T_1], clock @[IM.scala 17:19]
    io.inst <= io_inst_MPORT @[IM.scala 17:11]
    
  module register : 
    input clock : Clock
    input reset : Reset
    output io : {flip ren : UInt<1>, flip data : UInt<32>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, rs1out : UInt<32>, rs2out : UInt<32>}
    
    io.rs1out <= UInt<1>("h00") @[registerfile1.scala 16:11]
    io.rs2out <= UInt<1>("h00") @[registerfile1.scala 17:11]
    cmem registerfile : UInt<32>[32] @[registerfile1.scala 20:24]
    node _T = neq(io.rd, UInt<1>("h00")) @[registerfile1.scala 21:22]
    node _T_1 = and(io.ren, _T) @[registerfile1.scala 21:13]
    when _T_1 : @[registerfile1.scala 21:30]
      infer mport MPORT = registerfile[io.rd], clock @[registerfile1.scala 22:17]
      MPORT <= io.data @[registerfile1.scala 22:25]
      infer mport io_rs1out_MPORT = registerfile[io.rs1], clock @[registerfile1.scala 23:30]
      io.rs1out <= io_rs1out_MPORT @[registerfile1.scala 23:15]
      infer mport io_rs2out_MPORT = registerfile[io.rs2], clock @[registerfile1.scala 24:30]
      io.rs2out <= io_rs2out_MPORT @[registerfile1.scala 24:15]
      skip @[registerfile1.scala 21:30]
    else : @[registerfile1.scala 25:12]
      infer mport io_rs1out_MPORT_1 = registerfile[io.rs1], clock @[registerfile1.scala 26:30]
      io.rs1out <= io_rs1out_MPORT_1 @[registerfile1.scala 26:15]
      infer mport io_rs2out_MPORT_1 = registerfile[io.rs2], clock @[registerfile1.scala 27:30]
      io.rs2out <= io_rs2out_MPORT_1 @[registerfile1.scala 27:15]
      skip @[registerfile1.scala 25:12]
    
  module controlunit : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<32>, Opcode : UInt<7>, aluop : UInt<4>, iformat : UInt<1>, rformat : UInt<1>, sformat : UInt<1>, bformat : UInt<1>, jalformate : UInt<1>, luiformate : UInt<1>, Auipcformate : UInt<1>, jalrformate : UInt<1>, rd : UInt<5>, fun_3 : UInt<3>, rs1 : UInt<5>, rs2 : UInt<5>, imm : UInt<32>, mem_wr_en : UInt<1>, Wr_en : UInt<1>, Wr_back : UInt<2>, bran_fn3 : UInt<3>, flip btake : UInt<1>, pcsel : UInt<1>}
    
    node _io_Opcode_T = bits(io.in, 6, 0) @[CU.scala 36:28]
    io.Opcode <= _io_Opcode_T @[CU.scala 36:19]
    io.iformat <= UInt<1>("h00") @[CU.scala 37:19]
    io.rformat <= UInt<1>("h00") @[CU.scala 38:19]
    io.imm <= UInt<1>("h00") @[CU.scala 39:16]
    io.aluop <= UInt<1>("h00") @[CU.scala 40:17]
    io.rs1 <= UInt<1>("h00") @[CU.scala 41:16]
    io.rs2 <= UInt<1>("h00") @[CU.scala 42:16]
    io.rd <= UInt<1>("h00") @[CU.scala 43:15]
    io.fun_3 <= UInt<1>("h00") @[CU.scala 44:17]
    io.sformat <= UInt<1>("h00") @[CU.scala 45:19]
    node f3 = bits(io.in, 14, 12) @[CU.scala 46:23]
    node f7 = bits(io.in, 31, 25) @[CU.scala 47:23]
    io.bran_fn3 <= UInt<1>("h00") @[CU.scala 48:20]
    io.mem_wr_en <= UInt<1>("h00") @[CU.scala 49:21]
    io.Wr_back <= UInt<1>("h00") @[CU.scala 50:20]
    io.pcsel <= UInt<1>("h00") @[CU.scala 51:17]
    io.bformat <= UInt<1>("h00") @[CU.scala 52:20]
    io.Wr_en <= UInt<1>("h00") @[CU.scala 53:17]
    io.jalformate <= UInt<1>("h00") @[CU.scala 54:22]
    io.luiformate <= UInt<1>("h00") @[CU.scala 55:22]
    io.Auipcformate <= UInt<1>("h00") @[CU.scala 56:24]
    io.jalrformate <= UInt<1>("h00") @[CU.scala 57:23]
    node _T = eq(io.Opcode, UInt<6>("h033")) @[CU.scala 61:21]
    when _T : @[CU.scala 61:39]
      io.rformat <= UInt<1>("h01") @[CU.scala 62:20]
      io.Wr_en <= UInt<1>("h01") @[CU.scala 63:18]
      io.Wr_back <= UInt<1>("h01") @[CU.scala 64:20]
      node _io_rd_T = bits(io.in, 11, 7) @[CU.scala 65:24]
      io.rd <= _io_rd_T @[CU.scala 65:16]
      node io_aluop_lo = bits(f7, 5, 5) @[CU.scala 66:30]
      node _io_aluop_T = cat(f3, io_aluop_lo) @[Cat.scala 30:58]
      io.aluop <= _io_aluop_T @[CU.scala 66:19]
      node _io_rs1_T = bits(io.in, 19, 15) @[CU.scala 67:25]
      io.rs1 <= _io_rs1_T @[CU.scala 67:17]
      node _io_rs2_T = bits(io.in, 24, 20) @[CU.scala 68:26]
      io.rs2 <= _io_rs2_T @[CU.scala 68:18]
      io.bran_fn3 <= UInt<1>("h00") @[CU.scala 69:23]
      skip @[CU.scala 61:39]
    else : @[CU.scala 71:42]
      node _T_1 = eq(io.Opcode, UInt<5>("h013")) @[CU.scala 71:25]
      when _T_1 : @[CU.scala 71:42]
        io.iformat <= UInt<1>("h00") @[CU.scala 72:20]
        io.Wr_en <= UInt<1>("h01") @[CU.scala 73:18]
        io.Wr_back <= UInt<1>("h01") @[CU.scala 74:20]
        node _io_rd_T_1 = bits(io.in, 11, 7) @[CU.scala 75:24]
        io.rd <= _io_rd_T_1 @[CU.scala 75:16]
        node _io_aluop_T_1 = cat(f3, UInt<1>("h00")) @[Cat.scala 30:58]
        io.aluop <= _io_aluop_T_1 @[CU.scala 76:19]
        node _T_2 = eq(f3, UInt<3>("h05")) @[CU.scala 77:16]
        node _T_3 = eq(f3, UInt<1>("h01")) @[CU.scala 77:26]
        node _T_4 = or(_T_2, _T_3) @[CU.scala 77:22]
        when _T_4 : @[CU.scala 77:33]
          node io_aluop_lo_1 = bits(f7, 5, 5) @[CU.scala 78:34]
          node _io_aluop_T_2 = cat(f3, io_aluop_lo_1) @[Cat.scala 30:58]
          io.aluop <= _io_aluop_T_2 @[CU.scala 78:23]
          skip @[CU.scala 77:33]
        else : @[CU.scala 80:19]
          node _io_aluop_T_3 = cat(f3, UInt<1>("h00")) @[Cat.scala 30:58]
          io.aluop <= _io_aluop_T_3 @[CU.scala 81:23]
          skip @[CU.scala 80:19]
        node _io_rs1_T_1 = bits(io.in, 19, 15) @[CU.scala 83:25]
        io.rs1 <= _io_rs1_T_1 @[CU.scala 83:17]
        io.bran_fn3 <= UInt<1>("h00") @[CU.scala 84:23]
        node _io_imm_T = bits(io.in, 31, 31) @[CU.scala 86:40]
        node _io_imm_T_1 = bits(_io_imm_T, 0, 0) @[Bitwise.scala 72:15]
        node io_imm_hi = mux(_io_imm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
        node io_imm_lo = bits(io.in, 31, 20) @[CU.scala 86:51]
        node _io_imm_T_2 = cat(io_imm_hi, io_imm_lo) @[Cat.scala 30:58]
        io.imm <= _io_imm_T_2 @[CU.scala 86:20]
        skip @[CU.scala 71:42]
      else : @[CU.scala 89:42]
        node _T_5 = eq(io.Opcode, UInt<2>("h03")) @[CU.scala 89:25]
        when _T_5 : @[CU.scala 89:42]
          io.Wr_en <= UInt<1>("h01") @[CU.scala 91:14]
          node _io_rd_T_2 = bits(io.in, 11, 7) @[CU.scala 92:19]
          io.rd <= _io_rd_T_2 @[CU.scala 92:11]
          node _io_rs1_T_2 = bits(io.in, 20, 15) @[CU.scala 93:20]
          io.rs1 <= _io_rs1_T_2 @[CU.scala 93:12]
          io.aluop <= UInt<1>("h00") @[CU.scala 94:14]
          io.mem_wr_en <= UInt<1>("h00") @[CU.scala 95:18]
          io.Wr_back <= UInt<1>("h00") @[CU.scala 96:16]
          io.rs2 <= UInt<1>("h00") @[CU.scala 97:12]
          io.fun_3 <= f3 @[CU.scala 98:15]
          io.bran_fn3 <= UInt<1>("h00") @[CU.scala 99:20]
          node _io_imm_T_3 = bits(io.in, 31, 31) @[CU.scala 100:33]
          node _io_imm_T_4 = bits(_io_imm_T_3, 0, 0) @[Bitwise.scala 72:15]
          node io_imm_hi_1 = mux(_io_imm_T_4, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node io_imm_lo_1 = bits(io.in, 31, 20) @[CU.scala 100:44]
          node _io_imm_T_5 = cat(io_imm_hi_1, io_imm_lo_1) @[Cat.scala 30:58]
          io.imm <= _io_imm_T_5 @[CU.scala 100:13]
          skip @[CU.scala 89:42]
        else : @[CU.scala 103:41]
          node _T_6 = eq(io.Opcode, UInt<6>("h023")) @[CU.scala 103:24]
          when _T_6 : @[CU.scala 103:41]
            io.Wr_en <= UInt<1>("h00") @[CU.scala 104:13]
            io.sformat <= UInt<1>("h01") @[CU.scala 105:15]
            node _io_rs1_T_3 = bits(io.in, 19, 15) @[CU.scala 106:19]
            io.rs1 <= _io_rs1_T_3 @[CU.scala 106:11]
            node _io_rs2_T_1 = bits(io.in, 24, 20) @[CU.scala 107:20]
            io.rs2 <= _io_rs2_T_1 @[CU.scala 107:12]
            io.fun_3 <= f3 @[CU.scala 108:14]
            node _io_imm_T_6 = bits(io.in, 31, 31) @[CU.scala 109:35]
            node _io_imm_T_7 = bits(_io_imm_T_6, 0, 0) @[Bitwise.scala 72:15]
            node io_imm_hi_hi = mux(_io_imm_T_7, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node io_imm_hi_lo = bits(io.in, 31, 25) @[CU.scala 109:46]
            node io_imm_lo_2 = bits(io.in, 11, 7) @[CU.scala 109:59]
            node io_imm_hi_2 = cat(io_imm_hi_hi, io_imm_hi_lo) @[Cat.scala 30:58]
            node _io_imm_T_8 = cat(io_imm_hi_2, io_imm_lo_2) @[Cat.scala 30:58]
            io.imm <= _io_imm_T_8 @[CU.scala 109:15]
            io.aluop <= UInt<1>("h00") @[CU.scala 110:15]
            io.mem_wr_en <= UInt<1>("h01") @[CU.scala 111:19]
            io.Wr_back <= UInt<1>("h00") @[CU.scala 112:17]
            io.bran_fn3 <= UInt<1>("h00") @[CU.scala 113:18]
            skip @[CU.scala 103:41]
          else : @[CU.scala 116:38]
            node _T_7 = eq(io.Opcode, UInt<7>("h063")) @[CU.scala 116:21]
            when _T_7 : @[CU.scala 116:38]
              io.bformat <= UInt<1>("h01") @[CU.scala 117:15]
              node _io_rs1_T_4 = bits(io.in, 19, 15) @[CU.scala 118:19]
              io.rs1 <= _io_rs1_T_4 @[CU.scala 118:11]
              node _io_rs2_T_2 = bits(io.in, 24, 20) @[CU.scala 119:19]
              io.rs2 <= _io_rs2_T_2 @[CU.scala 119:11]
              node _io_imm_T_9 = bits(io.in, 31, 31) @[CU.scala 120:32]
              node _io_imm_T_10 = bits(_io_imm_T_9, 0, 0) @[Bitwise.scala 72:15]
              node io_imm_hi_hi_hi = mux(_io_imm_T_10, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node io_imm_hi_hi_lo = bits(io.in, 31, 31) @[CU.scala 120:43]
              node io_imm_hi_lo_1 = bits(io.in, 7, 7) @[CU.scala 120:53]
              node io_imm_lo_hi_hi = bits(io.in, 30, 25) @[CU.scala 120:62]
              node io_imm_lo_hi_lo = bits(io.in, 11, 8) @[CU.scala 120:75]
              node io_imm_lo_hi = cat(io_imm_lo_hi_hi, io_imm_lo_hi_lo) @[Cat.scala 30:58]
              node io_imm_lo_3 = cat(io_imm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
              node io_imm_hi_hi_1 = cat(io_imm_hi_hi_hi, io_imm_hi_hi_lo) @[Cat.scala 30:58]
              node io_imm_hi_3 = cat(io_imm_hi_hi_1, io_imm_hi_lo_1) @[Cat.scala 30:58]
              node _io_imm_T_11 = cat(io_imm_hi_3, io_imm_lo_3) @[Cat.scala 30:58]
              io.imm <= _io_imm_T_11 @[CU.scala 120:12]
              io.aluop <= UInt<1>("h00") @[CU.scala 121:14]
              io.Wr_back <= UInt<1>("h00") @[CU.scala 122:16]
              io.mem_wr_en <= UInt<1>("h00") @[CU.scala 123:18]
              io.Wr_en <= UInt<1>("h00") @[CU.scala 124:14]
              node _io_bran_fn3_T = bits(io.in, 14, 12) @[CU.scala 125:24]
              io.bran_fn3 <= _io_bran_fn3_T @[CU.scala 125:16]
              io.rd <= UInt<1>("h00") @[CU.scala 126:10]
              when io.btake : @[CU.scala 127:19]
                io.pcsel <= UInt<1>("h01") @[CU.scala 128:13]
                skip @[CU.scala 127:19]
              skip @[CU.scala 116:38]
            else : @[CU.scala 132:39]
              node _T_8 = eq(io.Opcode, UInt<7>("h06f")) @[CU.scala 132:22]
              when _T_8 : @[CU.scala 132:39]
                io.jalformate <= UInt<1>("h01") @[CU.scala 133:18]
                node _io_rd_T_3 = bits(io.in, 11, 7) @[CU.scala 134:18]
                io.rd <= _io_rd_T_3 @[CU.scala 134:10]
                io.rs1 <= UInt<1>("h00") @[CU.scala 135:11]
                io.rs2 <= UInt<1>("h00") @[CU.scala 136:11]
                io.mem_wr_en <= UInt<1>("h00") @[CU.scala 137:17]
                io.Wr_back <= UInt<2>("h02") @[CU.scala 138:15]
                io.Wr_en <= UInt<1>("h01") @[CU.scala 139:13]
                io.pcsel <= UInt<1>("h01") @[CU.scala 140:13]
                node _io_imm_T_12 = bits(io.in, 31, 31) @[CU.scala 141:34]
                node _io_imm_T_13 = bits(_io_imm_T_12, 0, 0) @[Bitwise.scala 72:15]
                node io_imm_hi_hi_hi_1 = mux(_io_imm_T_13, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                node io_imm_hi_hi_lo_1 = bits(io.in, 31, 31) @[CU.scala 141:45]
                node io_imm_hi_lo_2 = bits(io.in, 19, 12) @[CU.scala 141:55]
                node io_imm_lo_hi_hi_1 = bits(io.in, 20, 20) @[CU.scala 141:68]
                node io_imm_lo_hi_lo_1 = bits(io.in, 30, 21) @[CU.scala 141:78]
                node io_imm_lo_hi_1 = cat(io_imm_lo_hi_hi_1, io_imm_lo_hi_lo_1) @[Cat.scala 30:58]
                node io_imm_lo_4 = cat(io_imm_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
                node io_imm_hi_hi_2 = cat(io_imm_hi_hi_hi_1, io_imm_hi_hi_lo_1) @[Cat.scala 30:58]
                node io_imm_hi_4 = cat(io_imm_hi_hi_2, io_imm_hi_lo_2) @[Cat.scala 30:58]
                node _io_imm_T_14 = cat(io_imm_hi_4, io_imm_lo_4) @[Cat.scala 30:58]
                io.imm <= _io_imm_T_14 @[CU.scala 141:12]
                io.aluop <= UInt<1>("h00") @[CU.scala 142:13]
                io.jalformate <= UInt<1>("h01") @[CU.scala 143:18]
                skip @[CU.scala 132:39]
              else : @[CU.scala 146:40]
                node _T_9 = eq(io.Opcode, UInt<6>("h037")) @[CU.scala 146:23]
                when _T_9 : @[CU.scala 146:40]
                  io.luiformate <= UInt<1>("h01") @[CU.scala 147:18]
                  node _io_rd_T_4 = bits(io.in, 11, 7) @[CU.scala 148:19]
                  io.rd <= _io_rd_T_4 @[CU.scala 148:11]
                  io.rs1 <= UInt<1>("h00") @[CU.scala 149:12]
                  io.rs2 <= UInt<1>("h00") @[CU.scala 150:11]
                  io.mem_wr_en <= UInt<1>("h00") @[CU.scala 151:17]
                  io.Wr_en <= UInt<1>("h01") @[CU.scala 152:13]
                  io.Wr_back <= UInt<1>("h01") @[CU.scala 153:15]
                  io.pcsel <= UInt<1>("h00") @[CU.scala 154:13]
                  node io_imm_hi_5 = bits(io.in, 31, 12) @[CU.scala 155:24]
                  node io_imm_lo_5 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
                  node _io_imm_T_15 = cat(io_imm_hi_5, io_imm_lo_5) @[Cat.scala 30:58]
                  io.imm <= _io_imm_T_15 @[CU.scala 155:12]
                  io.aluop <= UInt<1>("h00") @[CU.scala 156:13]
                  skip @[CU.scala 146:40]
                else : @[CU.scala 160:39]
                  node _T_10 = eq(io.Opcode, UInt<7>("h067")) @[CU.scala 160:22]
                  when _T_10 : @[CU.scala 160:39]
                    io.jalrformate <= UInt<1>("h01") @[CU.scala 161:19]
                    node _io_rd_T_5 = bits(io.in, 11, 7) @[CU.scala 162:19]
                    io.rd <= _io_rd_T_5 @[CU.scala 162:11]
                    node _io_rs1_T_5 = bits(io.in, 19, 15) @[CU.scala 163:20]
                    io.rs1 <= _io_rs1_T_5 @[CU.scala 163:12]
                    io.rs2 <= UInt<1>("h00") @[CU.scala 164:12]
                    io.mem_wr_en <= UInt<1>("h00") @[CU.scala 165:18]
                    io.Wr_en <= UInt<1>("h01") @[CU.scala 166:14]
                    io.Wr_back <= UInt<2>("h02") @[CU.scala 167:16]
                    io.aluop <= UInt<1>("h00") @[CU.scala 168:14]
                    io.pcsel <= UInt<1>("h01") @[CU.scala 169:14]
                    node _io_imm_T_16 = bits(io.in, 31, 31) @[CU.scala 170:31]
                    node _io_imm_T_17 = bits(_io_imm_T_16, 0, 0) @[Bitwise.scala 72:15]
                    node io_imm_hi_6 = mux(_io_imm_T_17, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
                    node io_imm_lo_6 = bits(io.in, 31, 20) @[CU.scala 170:42]
                    node _io_imm_T_18 = cat(io_imm_hi_6, io_imm_lo_6) @[Cat.scala 30:58]
                    io.imm <= _io_imm_T_18 @[CU.scala 170:12]
                    skip @[CU.scala 160:39]
                  else : @[CU.scala 173:40]
                    node _T_11 = eq(io.Opcode, UInt<7>("h067")) @[CU.scala 173:23]
                    when _T_11 : @[CU.scala 173:40]
                      io.Auipcformate <= UInt<1>("h01") @[CU.scala 174:20]
                      io.rd <= UInt<1>("h00") @[CU.scala 175:10]
                      io.rs1 <= UInt<1>("h00") @[CU.scala 176:11]
                      io.rs2 <= UInt<1>("h00") @[CU.scala 177:11]
                      io.mem_wr_en <= UInt<1>("h00") @[CU.scala 178:17]
                      io.Wr_back <= UInt<1>("h00") @[CU.scala 179:15]
                      io.Wr_en <= UInt<1>("h00") @[CU.scala 180:13]
                      io.pcsel <= UInt<1>("h01") @[CU.scala 181:13]
                      node io_imm_hi_7 = bits(io.in, 31, 12) @[CU.scala 182:24]
                      node io_imm_lo_7 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
                      node _io_imm_T_19 = cat(io_imm_hi_7, io_imm_lo_7) @[Cat.scala 30:58]
                      io.imm <= _io_imm_T_19 @[CU.scala 182:12]
                      io.aluop <= UInt<1>("h00") @[CU.scala 183:13]
                      skip @[CU.scala 173:40]
                    else : @[CU.scala 185:11]
                      io.mem_wr_en <= UInt<1>("h00") @[CU.scala 186:18]
                      io.Wr_back <= UInt<1>("h00") @[CU.scala 187:20]
                      io.Wr_en <= UInt<1>("h00") @[CU.scala 188:17]
                      io.bformat <= UInt<1>("h00") @[CU.scala 189:20]
                      io.jalformate <= UInt<1>("h00") @[CU.scala 190:22]
                      io.luiformate <= UInt<1>("h00") @[CU.scala 191:22]
                      io.Auipcformate <= UInt<1>("h00") @[CU.scala 192:24]
                      io.jalrformate <= UInt<1>("h00") @[CU.scala 193:23]
                      io.imm <= UInt<1>("h00") @[CU.scala 195:15]
                      skip @[CU.scala 185:11]
    
  module ALUD : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : UInt<32>, flip in_B : UInt<32>, flip aluop : UInt<4>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[ALU.scala 27:10]
    node _T = eq(UInt<1>("h00"), io.aluop) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_out_T = add(io.in_A, io.in_B) @[ALU.scala 32:25]
      node _io_out_T_1 = tail(_io_out_T, 1) @[ALU.scala 32:25]
      io.out <= _io_out_T_1 @[ALU.scala 32:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), io.aluop) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_out_T_2 = sub(io.in_A, io.in_B) @[ALU.scala 35:29]
        node _io_out_T_3 = tail(_io_out_T_2, 1) @[ALU.scala 35:29]
        io.out <= _io_out_T_3 @[ALU.scala 35:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<2>("h02"), io.aluop) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _io_out_T_4 = bits(io.in_B, 4, 0) @[ALU.scala 39:36]
          node _io_out_T_5 = dshl(io.in_A, _io_out_T_4) @[ALU.scala 39:25]
          io.out <= _io_out_T_5 @[ALU.scala 39:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<3>("h04"), io.aluop) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            node _io_out_T_6 = asSInt(io.in_A) @[ALU.scala 42:26]
            node _io_out_T_7 = asSInt(io.in_B) @[ALU.scala 42:43]
            node _io_out_T_8 = lt(_io_out_T_6, _io_out_T_7) @[ALU.scala 42:33]
            io.out <= _io_out_T_8 @[ALU.scala 42:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<3>("h06"), io.aluop) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              node _io_out_T_9 = lt(io.in_A, io.in_B) @[ALU.scala 45:26]
              io.out <= _io_out_T_9 @[ALU.scala 45:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<4>("h08"), io.aluop) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                node _io_out_T_10 = xor(io.in_A, io.in_B) @[ALU.scala 48:25]
                io.out <= _io_out_T_10 @[ALU.scala 48:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<4>("h0a"), io.aluop) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  node _io_out_T_11 = bits(io.in_B, 4, 0) @[ALU.scala 51:38]
                  node _io_out_T_12 = dshr(io.in_A, _io_out_T_11) @[ALU.scala 51:27]
                  io.out <= _io_out_T_12 @[ALU.scala 51:16]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<4>("h0b"), io.aluop) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    node _io_out_T_13 = asSInt(io.in_A) @[ALU.scala 55:28]
                    node _io_out_T_14 = bits(io.in_B, 4, 0) @[ALU.scala 55:46]
                    node _io_out_T_15 = dshr(_io_out_T_13, _io_out_T_14) @[ALU.scala 55:35]
                    node _io_out_T_16 = asUInt(_io_out_T_15) @[ALU.scala 55:62]
                    io.out <= _io_out_T_16 @[ALU.scala 55:16]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<4>("h0c"), io.aluop) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      node _io_out_T_17 = or(io.in_A, io.in_B) @[ALU.scala 58:25]
                      io.out <= _io_out_T_17 @[ALU.scala 58:14]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_9 = eq(UInt<4>("h0e"), io.aluop) @[Conditional.scala 37:30]
                      when _T_9 : @[Conditional.scala 39:67]
                        node _io_out_T_18 = and(io.in_A, io.in_B) @[ALU.scala 61:25]
                        io.out <= _io_out_T_18 @[ALU.scala 61:14]
                        skip @[Conditional.scala 39:67]
    
  module Datamem : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wr_en : UInt<1>, flip address : UInt<32>, flip datain : UInt<32>, Dout : UInt<32>, flip fun3 : UInt<3>}
    
    cmem memory : UInt<8>[4][1024] @[Datamemory.scala 16:20]
    wire mask : UInt<1>[4] @[Datamemory.scala 17:18]
    wire data : UInt<8>[4] @[Datamemory.scala 18:18]
    wire temp : UInt<8>[4] @[Datamemory.scala 19:18]
    io.Dout <= UInt<1>("h00") @[Datamemory.scala 21:11]
    mask[0] <= UInt<1>("h00") @[Datamemory.scala 23:11]
    mask[1] <= UInt<1>("h00") @[Datamemory.scala 24:11]
    mask[2] <= UInt<1>("h00") @[Datamemory.scala 25:11]
    mask[3] <= UInt<1>("h00") @[Datamemory.scala 26:11]
    node _data_0_T = bits(io.datain, 7, 0) @[Datamemory.scala 28:23]
    data[0] <= _data_0_T @[Datamemory.scala 28:11]
    node _data_1_T = bits(io.datain, 15, 8) @[Datamemory.scala 29:23]
    data[1] <= _data_1_T @[Datamemory.scala 29:11]
    node _data_2_T = bits(io.datain, 23, 16) @[Datamemory.scala 30:23]
    data[2] <= _data_2_T @[Datamemory.scala 30:11]
    node _data_3_T = bits(io.datain, 31, 24) @[Datamemory.scala 31:23]
    data[3] <= _data_3_T @[Datamemory.scala 31:11]
    when io.Wr_en : @[Datamemory.scala 33:15]
      node _T = eq(io.fun3, UInt<1>("h00")) @[Datamemory.scala 34:16]
      when _T : @[Datamemory.scala 34:24]
        node _T_1 = bits(io.address, 1, 0) @[Datamemory.scala 35:20]
        node _T_2 = eq(_T_1, UInt<1>("h00")) @[Datamemory.scala 35:25]
        when _T_2 : @[Datamemory.scala 35:33]
          mask[0] <= UInt<1>("h01") @[Datamemory.scala 39:15]
          node _data_0_T_1 = bits(io.datain, 7, 0) @[Datamemory.scala 44:27]
          data[0] <= _data_0_T_1 @[Datamemory.scala 44:15]
          skip @[Datamemory.scala 35:33]
        else : @[Datamemory.scala 46:39]
          node _T_3 = bits(io.address, 1, 0) @[Datamemory.scala 46:25]
          node _T_4 = eq(_T_3, UInt<1>("h01")) @[Datamemory.scala 46:31]
          when _T_4 : @[Datamemory.scala 46:39]
            mask[1] <= UInt<1>("h01") @[Datamemory.scala 50:15]
            mask[2] <= UInt<1>("h00") @[Datamemory.scala 51:15]
            mask[3] <= UInt<1>("h00") @[Datamemory.scala 52:15]
            node _data_1_T_1 = bits(io.datain, 7, 0) @[Datamemory.scala 54:27]
            data[1] <= _data_1_T_1 @[Datamemory.scala 54:15]
            skip @[Datamemory.scala 46:39]
          else : @[Datamemory.scala 58:39]
            node _T_5 = bits(io.address, 1, 0) @[Datamemory.scala 58:25]
            node _T_6 = eq(_T_5, UInt<2>("h02")) @[Datamemory.scala 58:31]
            when _T_6 : @[Datamemory.scala 58:39]
              mask[2] <= UInt<1>("h01") @[Datamemory.scala 62:15]
              node _data_2_T_1 = bits(io.datain, 7, 0) @[Datamemory.scala 65:27]
              data[2] <= _data_2_T_1 @[Datamemory.scala 65:15]
              skip @[Datamemory.scala 58:39]
            else : @[Datamemory.scala 67:40]
              node _T_7 = bits(io.address, 1, 0) @[Datamemory.scala 67:26]
              node _T_8 = eq(_T_7, UInt<2>("h03")) @[Datamemory.scala 67:32]
              when _T_8 : @[Datamemory.scala 67:40]
                mask[3] <= UInt<1>("h01") @[Datamemory.scala 72:15]
                node _data_3_T_1 = bits(io.datain, 7, 0) @[Datamemory.scala 74:27]
                data[3] <= _data_3_T_1 @[Datamemory.scala 74:15]
                skip @[Datamemory.scala 67:40]
              else : @[Datamemory.scala 78:29]
                node _T_9 = eq(io.fun3, UInt<1>("h01")) @[Datamemory.scala 78:21]
                when _T_9 : @[Datamemory.scala 78:29]
                  node _T_10 = bits(io.address, 1, 0) @[Datamemory.scala 80:21]
                  node _T_11 = eq(_T_10, UInt<1>("h00")) @[Datamemory.scala 80:28]
                  when _T_11 : @[Datamemory.scala 80:37]
                    mask[0] <= UInt<1>("h01") @[Datamemory.scala 81:15]
                    mask[1] <= UInt<1>("h01") @[Datamemory.scala 82:15]
                    node _data_0_T_2 = bits(io.datain, 7, 0) @[Datamemory.scala 86:27]
                    data[0] <= _data_0_T_2 @[Datamemory.scala 86:15]
                    node _data_1_T_2 = bits(io.datain, 15, 8) @[Datamemory.scala 87:27]
                    data[1] <= _data_1_T_2 @[Datamemory.scala 87:15]
                    skip @[Datamemory.scala 80:37]
                  else : @[Datamemory.scala 88:42]
                    node _T_12 = bits(io.address, 1, 0) @[Datamemory.scala 88:26]
                    node _T_13 = eq(_T_12, UInt<1>("h01")) @[Datamemory.scala 88:33]
                    when _T_13 : @[Datamemory.scala 88:42]
                      mask[1] <= UInt<1>("h01") @[Datamemory.scala 91:15]
                      mask[3] <= UInt<1>("h00") @[Datamemory.scala 93:15]
                      node _data_1_T_3 = bits(io.datain, 7, 0) @[Datamemory.scala 95:27]
                      data[1] <= _data_1_T_3 @[Datamemory.scala 95:15]
                      node _data_2_T_2 = bits(io.datain, 15, 8) @[Datamemory.scala 96:27]
                      data[2] <= _data_2_T_2 @[Datamemory.scala 96:15]
                      skip @[Datamemory.scala 88:42]
                    else : @[Datamemory.scala 98:42]
                      node _T_14 = bits(io.address, 1, 0) @[Datamemory.scala 98:26]
                      node _T_15 = eq(_T_14, UInt<2>("h02")) @[Datamemory.scala 98:33]
                      when _T_15 : @[Datamemory.scala 98:42]
                        mask[2] <= UInt<1>("h01") @[Datamemory.scala 102:15]
                        mask[3] <= UInt<1>("h01") @[Datamemory.scala 103:15]
                        node _data_2_T_3 = bits(io.datain, 7, 0) @[Datamemory.scala 105:26]
                        data[2] <= _data_2_T_3 @[Datamemory.scala 105:15]
                        node _data_3_T_2 = bits(io.datain, 15, 8) @[Datamemory.scala 106:27]
                        data[3] <= _data_3_T_2 @[Datamemory.scala 106:15]
                        skip @[Datamemory.scala 98:42]
                      else : @[Datamemory.scala 108:42]
                        node _T_16 = bits(io.address, 1, 0) @[Datamemory.scala 108:26]
                        node _T_17 = eq(_T_16, UInt<2>("h03")) @[Datamemory.scala 108:33]
                        when _T_17 : @[Datamemory.scala 108:42]
                          mask[0] <= UInt<1>("h01") @[Datamemory.scala 110:15]
                          mask[3] <= UInt<1>("h01") @[Datamemory.scala 113:15]
                          node _data_3_T_3 = bits(io.datain, 7, 0) @[Datamemory.scala 115:26]
                          data[3] <= _data_3_T_3 @[Datamemory.scala 115:15]
                          node _data_0_T_3 = bits(io.datain, 15, 8) @[Datamemory.scala 116:27]
                          data[0] <= _data_0_T_3 @[Datamemory.scala 116:15]
                          skip @[Datamemory.scala 108:42]
                  skip @[Datamemory.scala 78:29]
                else : @[Datamemory.scala 120:30]
                  node _T_18 = eq(io.fun3, UInt<2>("h02")) @[Datamemory.scala 120:22]
                  when _T_18 : @[Datamemory.scala 120:30]
                    mask[0] <= UInt<1>("h01") @[Datamemory.scala 125:15]
                    mask[1] <= UInt<1>("h01") @[Datamemory.scala 126:15]
                    mask[2] <= UInt<1>("h01") @[Datamemory.scala 127:15]
                    mask[3] <= UInt<1>("h01") @[Datamemory.scala 128:15]
                    node _data_0_T_4 = bits(io.datain, 7, 0) @[Datamemory.scala 130:23]
                    data[0] <= _data_0_T_4 @[Datamemory.scala 130:11]
                    node _data_1_T_4 = bits(io.datain, 15, 8) @[Datamemory.scala 131:23]
                    data[1] <= _data_1_T_4 @[Datamemory.scala 131:11]
                    node _data_2_T_4 = bits(io.datain, 23, 16) @[Datamemory.scala 132:23]
                    data[2] <= _data_2_T_4 @[Datamemory.scala 132:11]
                    node _data_3_T_4 = bits(io.datain, 31, 24) @[Datamemory.scala 133:23]
                    data[3] <= _data_3_T_4 @[Datamemory.scala 133:11]
                    skip @[Datamemory.scala 120:30]
        skip @[Datamemory.scala 34:24]
      node _T_19 = bits(io.address, 31, 2) @[Datamemory.scala 139:26]
      node _T_20 = bits(_T_19, 9, 0)
      write mport MPORT = memory[_T_20], clock
      when mask[0] :
        MPORT[0] <= data[0]
        skip
      when mask[1] :
        MPORT[1] <= data[1]
        skip
      when mask[2] :
        MPORT[2] <= data[2]
        skip
      when mask[3] :
        MPORT[3] <= data[3]
        skip
      node _T_21 = bits(io.address, 31, 2) @[Datamemory.scala 140:32]
      node _T_22 = bits(_T_21, 9, 0) @[Datamemory.scala 140:21]
      read mport MPORT_1 = memory[_T_22], clock @[Datamemory.scala 140:21]
      temp[0] <= MPORT_1[0] @[Datamemory.scala 140:8]
      temp[1] <= MPORT_1[1] @[Datamemory.scala 140:8]
      temp[2] <= MPORT_1[2] @[Datamemory.scala 140:8]
      temp[3] <= MPORT_1[3] @[Datamemory.scala 140:8]
      skip @[Datamemory.scala 33:15]
    node _T_23 = bits(io.address, 31, 2) @[Datamemory.scala 143:30]
    node _T_24 = bits(_T_23, 9, 0) @[Datamemory.scala 143:19]
    read mport MPORT_2 = memory[_T_24], clock @[Datamemory.scala 143:19]
    temp[0] <= MPORT_2[0] @[Datamemory.scala 143:5]
    temp[1] <= MPORT_2[1] @[Datamemory.scala 143:5]
    temp[2] <= MPORT_2[2] @[Datamemory.scala 143:5]
    temp[3] <= MPORT_2[3] @[Datamemory.scala 143:5]
    node _T_25 = eq(io.fun3, UInt<1>("h00")) @[Datamemory.scala 145:14]
    when _T_25 : @[Datamemory.scala 145:23]
      node _T_26 = bits(io.address, 1, 0) @[Datamemory.scala 146:20]
      node _T_27 = eq(_T_26, UInt<1>("h00")) @[Datamemory.scala 146:26]
      when _T_27 : @[Datamemory.scala 146:34]
        node _io_Dout_T = bits(temp[0], 7, 7) @[Datamemory.scala 147:35]
        node _io_Dout_T_1 = bits(_io_Dout_T, 0, 0) @[Bitwise.scala 72:15]
        node io_Dout_hi = mux(_io_Dout_T_1, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
        node _io_Dout_T_2 = cat(io_Dout_hi, temp[0]) @[Cat.scala 30:58]
        io.Dout <= _io_Dout_T_2 @[Datamemory.scala 147:13]
        skip @[Datamemory.scala 146:34]
      else : @[Datamemory.scala 148:38]
        node _T_28 = bits(io.address, 1, 0) @[Datamemory.scala 148:25]
        node _T_29 = eq(_T_28, UInt<1>("h01")) @[Datamemory.scala 148:30]
        when _T_29 : @[Datamemory.scala 148:38]
          node _io_Dout_T_3 = bits(temp[1], 7, 7) @[Datamemory.scala 149:35]
          node _io_Dout_T_4 = bits(_io_Dout_T_3, 0, 0) @[Bitwise.scala 72:15]
          node io_Dout_hi_1 = mux(_io_Dout_T_4, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
          node _io_Dout_T_5 = cat(io_Dout_hi_1, temp[1]) @[Cat.scala 30:58]
          io.Dout <= _io_Dout_T_5 @[Datamemory.scala 149:13]
          skip @[Datamemory.scala 148:38]
        else : @[Datamemory.scala 150:38]
          node _T_30 = bits(io.address, 1, 0) @[Datamemory.scala 150:25]
          node _T_31 = eq(_T_30, UInt<2>("h02")) @[Datamemory.scala 150:30]
          when _T_31 : @[Datamemory.scala 150:38]
            node _io_Dout_T_6 = bits(temp[2], 7, 7) @[Datamemory.scala 151:35]
            node _io_Dout_T_7 = bits(_io_Dout_T_6, 0, 0) @[Bitwise.scala 72:15]
            node io_Dout_hi_2 = mux(_io_Dout_T_7, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
            node _io_Dout_T_8 = cat(io_Dout_hi_2, temp[2]) @[Cat.scala 30:58]
            io.Dout <= _io_Dout_T_8 @[Datamemory.scala 151:13]
            skip @[Datamemory.scala 150:38]
          else : @[Datamemory.scala 152:38]
            node _T_32 = bits(io.address, 1, 0) @[Datamemory.scala 152:25]
            node _T_33 = eq(_T_32, UInt<2>("h03")) @[Datamemory.scala 152:30]
            when _T_33 : @[Datamemory.scala 152:38]
              node _io_Dout_T_9 = bits(temp[3], 7, 7) @[Datamemory.scala 153:35]
              node _io_Dout_T_10 = bits(_io_Dout_T_9, 0, 0) @[Bitwise.scala 72:15]
              node io_Dout_hi_3 = mux(_io_Dout_T_10, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _io_Dout_T_11 = cat(io_Dout_hi_3, temp[3]) @[Cat.scala 30:58]
              io.Dout <= _io_Dout_T_11 @[Datamemory.scala 153:13]
              skip @[Datamemory.scala 152:38]
      skip @[Datamemory.scala 145:23]
    else : @[Datamemory.scala 155:31]
      node _T_34 = eq(io.fun3, UInt<1>("h01")) @[Datamemory.scala 155:22]
      when _T_34 : @[Datamemory.scala 155:31]
        node _T_35 = bits(io.address, 1, 0) @[Datamemory.scala 156:20]
        node _T_36 = eq(_T_35, UInt<1>("h00")) @[Datamemory.scala 156:26]
        when _T_36 : @[Datamemory.scala 156:34]
          node _io_Dout_T_12 = bits(temp[0], 7, 7) @[Datamemory.scala 157:35]
          node _io_Dout_T_13 = bits(_io_Dout_T_12, 0, 0) @[Bitwise.scala 72:15]
          node io_Dout_hi_hi = mux(_io_Dout_T_13, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
          node io_Dout_hi_4 = cat(io_Dout_hi_hi, temp[0]) @[Cat.scala 30:58]
          node _io_Dout_T_14 = cat(io_Dout_hi_4, temp[1]) @[Cat.scala 30:58]
          io.Dout <= _io_Dout_T_14 @[Datamemory.scala 157:13]
          skip @[Datamemory.scala 156:34]
        else : @[Datamemory.scala 158:38]
          node _T_37 = bits(io.address, 1, 0) @[Datamemory.scala 158:25]
          node _T_38 = eq(_T_37, UInt<1>("h01")) @[Datamemory.scala 158:30]
          when _T_38 : @[Datamemory.scala 158:38]
            node _io_Dout_T_15 = bits(temp[1], 7, 7) @[Datamemory.scala 159:35]
            node _io_Dout_T_16 = bits(_io_Dout_T_15, 0, 0) @[Bitwise.scala 72:15]
            node io_Dout_hi_hi_1 = mux(_io_Dout_T_16, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
            node io_Dout_hi_5 = cat(io_Dout_hi_hi_1, temp[1]) @[Cat.scala 30:58]
            node _io_Dout_T_17 = cat(io_Dout_hi_5, temp[2]) @[Cat.scala 30:58]
            io.Dout <= _io_Dout_T_17 @[Datamemory.scala 159:13]
            skip @[Datamemory.scala 158:38]
          else : @[Datamemory.scala 160:38]
            node _T_39 = bits(io.address, 1, 0) @[Datamemory.scala 160:25]
            node _T_40 = eq(_T_39, UInt<2>("h02")) @[Datamemory.scala 160:30]
            when _T_40 : @[Datamemory.scala 160:38]
              node _io_Dout_T_18 = bits(temp[2], 7, 7) @[Datamemory.scala 161:35]
              node _io_Dout_T_19 = bits(_io_Dout_T_18, 0, 0) @[Bitwise.scala 72:15]
              node io_Dout_hi_hi_2 = mux(_io_Dout_T_19, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
              node io_Dout_hi_6 = cat(io_Dout_hi_hi_2, temp[2]) @[Cat.scala 30:58]
              node _io_Dout_T_20 = cat(io_Dout_hi_6, temp[3]) @[Cat.scala 30:58]
              io.Dout <= _io_Dout_T_20 @[Datamemory.scala 161:13]
              skip @[Datamemory.scala 160:38]
            else : @[Datamemory.scala 162:38]
              node _T_41 = bits(io.address, 1, 0) @[Datamemory.scala 162:25]
              node _T_42 = eq(_T_41, UInt<2>("h03")) @[Datamemory.scala 162:30]
              when _T_42 : @[Datamemory.scala 162:38]
                node _io_Dout_T_21 = bits(temp[3], 7, 7) @[Datamemory.scala 163:35]
                node _io_Dout_T_22 = bits(_io_Dout_T_21, 0, 0) @[Bitwise.scala 72:15]
                node io_Dout_hi_7 = mux(_io_Dout_T_22, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                node _io_Dout_T_23 = cat(io_Dout_hi_7, temp[3]) @[Cat.scala 30:58]
                io.Dout <= _io_Dout_T_23 @[Datamemory.scala 163:13]
                skip @[Datamemory.scala 162:38]
        skip @[Datamemory.scala 155:31]
      else : @[Datamemory.scala 164:31]
        node _T_43 = eq(io.fun3, UInt<2>("h02")) @[Datamemory.scala 164:22]
        when _T_43 : @[Datamemory.scala 164:31]
          node io_Dout_lo = cat(temp[1], temp[0]) @[Cat.scala 30:58]
          node io_Dout_hi_8 = cat(temp[3], temp[2]) @[Cat.scala 30:58]
          node _io_Dout_T_24 = cat(io_Dout_hi_8, io_Dout_lo) @[Cat.scala 30:58]
          io.Dout <= _io_Dout_T_24 @[Datamemory.scala 165:13]
          skip @[Datamemory.scala 164:31]
    
  module BranchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip fnct3 : UInt<3>, flip branch : UInt<1>, flip arg_x : UInt<32>, flip arg_y : UInt<32>, br_taken : UInt<1>}
    
    io.br_taken <= UInt<1>("h00") @[Branch.scala 13:13]
    node _T = eq(UInt<1>("h00"), io.fnct3) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.arg_x, io.arg_y) @[Branch.scala 17:24]
      node _T_2 = eq(io.branch, UInt<1>("h01")) @[Branch.scala 17:52]
      node _T_3 = and(_T_1, _T_2) @[Branch.scala 17:38]
      when _T_3 : @[Branch.scala 17:61]
        io.br_taken <= UInt<1>("h01") @[Branch.scala 18:24]
        skip @[Branch.scala 17:61]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<1>("h01"), io.fnct3) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = neq(io.arg_x, io.arg_y) @[Branch.scala 23:23]
        node _T_6 = eq(io.branch, UInt<1>("h01")) @[Branch.scala 23:50]
        node _T_7 = and(_T_5, _T_6) @[Branch.scala 23:36]
        when _T_7 : @[Branch.scala 23:59]
          io.br_taken <= UInt<1>("h01") @[Branch.scala 24:24]
          skip @[Branch.scala 23:59]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<3>("h04"), io.fnct3) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = lt(io.arg_x, io.arg_y) @[Branch.scala 29:23]
          node _T_10 = eq(io.branch, UInt<1>("h01")) @[Branch.scala 29:48]
          node _T_11 = and(_T_9, _T_10) @[Branch.scala 29:34]
          when _T_11 : @[Branch.scala 29:57]
            io.br_taken <= UInt<1>("h01") @[Branch.scala 30:24]
            skip @[Branch.scala 29:57]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_12 = eq(UInt<3>("h05"), io.fnct3) @[Conditional.scala 37:30]
          when _T_12 : @[Conditional.scala 39:67]
            node _T_13 = geq(io.arg_x, io.arg_y) @[Branch.scala 35:24]
            node _T_14 = eq(io.branch, UInt<1>("h01")) @[Branch.scala 35:50]
            node _T_15 = and(_T_13, _T_14) @[Branch.scala 35:36]
            when _T_15 : @[Branch.scala 35:59]
              io.br_taken <= UInt<1>("h01") @[Branch.scala 36:24]
              skip @[Branch.scala 35:59]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_16 = eq(UInt<3>("h06"), io.fnct3) @[Conditional.scala 37:30]
            when _T_16 : @[Conditional.scala 39:67]
              node _T_17 = lt(io.arg_x, io.arg_y) @[Branch.scala 41:23]
              node _T_18 = eq(io.branch, UInt<1>("h01")) @[Branch.scala 41:48]
              node _T_19 = and(_T_17, _T_18) @[Branch.scala 41:34]
              when _T_19 : @[Branch.scala 41:57]
                io.br_taken <= UInt<1>("h01") @[Branch.scala 42:24]
                skip @[Branch.scala 41:57]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_20 = eq(UInt<3>("h07"), io.fnct3) @[Conditional.scala 37:30]
              when _T_20 : @[Conditional.scala 39:67]
                node _T_21 = geq(io.arg_x, io.arg_y) @[Branch.scala 47:23]
                node _T_22 = eq(io.branch, UInt<1>("h01")) @[Branch.scala 47:49]
                node _T_23 = and(_T_21, _T_22) @[Branch.scala 47:35]
                when _T_23 : @[Branch.scala 47:58]
                  io.br_taken <= UInt<1>("h01") @[Branch.scala 48:24]
                  skip @[Branch.scala 47:58]
                skip @[Conditional.scala 39:67]
    
  module Datapath : 
    input clock : Clock
    input reset : Reset
    output io : {Pcout : UInt<32>, flip insin : UInt<32>, out : UInt<32>}
    
    inst pc of Pc @[Datapath.scala 13:23]
    pc.clock <= clock
    pc.reset <= reset
    inst im of InstMem @[Datapath.scala 14:22]
    im.clock <= clock
    im.reset <= reset
    inst reg of register @[Datapath.scala 15:23]
    reg.clock <= clock
    reg.reset <= reset
    inst cu of controlunit @[Datapath.scala 16:23]
    cu.clock <= clock
    cu.reset <= reset
    inst alu of ALUD @[Datapath.scala 17:24]
    alu.clock <= clock
    alu.reset <= reset
    inst dmem of Datamem @[Datapath.scala 18:24]
    dmem.clock <= clock
    dmem.reset <= reset
    inst Bran of BranchControl @[Datapath.scala 19:24]
    Bran.clock <= clock
    Bran.reset <= reset
    reg pc_r : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Datapath.scala 22:25]
    node _pc_r_T = add(pc_r, UInt<3>("h04")) @[Datapath.scala 28:55]
    node _pc_r_T_1 = tail(_pc_r_T, 1) @[Datapath.scala 28:55]
    node _pc_r_T_2 = mux(cu.io.pcsel, alu.io.out, _pc_r_T_1) @[Datapath.scala 28:18]
    pc_r <= _pc_r_T_2 @[Datapath.scala 28:12]
    io.Pcout <= pc_r @[Datapath.scala 29:17]
    im.io.addr <= pc_r @[Datapath.scala 35:13]
    cu.io.in <= im.io.inst @[Datapath.scala 36:17]
    reg.io.ren <= cu.io.Wr_en @[Datapath.scala 37:19]
    node _T = eq(cu.io.Wr_back, UInt<1>("h00")) @[Datapath.scala 39:26]
    when _T : @[Datapath.scala 40:8]
      reg.io.data <= dmem.io.Dout @[Datapath.scala 41:20]
      skip @[Datapath.scala 40:8]
    else : @[Datapath.scala 45:8]
      node _T_1 = eq(cu.io.Wr_back, UInt<1>("h01")) @[Datapath.scala 44:31]
      when _T_1 : @[Datapath.scala 45:8]
        reg.io.data <= alu.io.out @[Datapath.scala 46:20]
        skip @[Datapath.scala 45:8]
      else : @[Datapath.scala 49:8]
        node _T_2 = eq(cu.io.Wr_back, UInt<2>("h02")) @[Datapath.scala 48:31]
        when _T_2 : @[Datapath.scala 49:8]
          node _reg_io_data_T = add(pc_r, UInt<3>("h04")) @[Datapath.scala 50:26]
          node _reg_io_data_T_1 = tail(_reg_io_data_T, 1) @[Datapath.scala 50:26]
          reg.io.data <= _reg_io_data_T_1 @[Datapath.scala 50:20]
          skip @[Datapath.scala 49:8]
        else : @[Datapath.scala 53:8]
          reg.io.data <= UInt<1>("h00") @[Datapath.scala 54:20]
          skip @[Datapath.scala 53:8]
    reg.io.rs1 <= cu.io.rs1 @[Datapath.scala 56:19]
    reg.io.rs2 <= cu.io.rs2 @[Datapath.scala 57:19]
    reg.io.rd <= cu.io.rd @[Datapath.scala 58:18]
    alu.io.aluop <= cu.io.aluop @[Datapath.scala 59:21]
    node _alu_io_in_A_T = and(cu.io.bformat, Bran.io.br_taken) @[Datapath.scala 61:41]
    node _alu_io_in_A_T_1 = or(_alu_io_in_A_T, cu.io.jalformate) @[Datapath.scala 61:62]
    node _alu_io_in_A_T_2 = or(_alu_io_in_A_T_1, cu.io.jalrformate) @[Datapath.scala 61:82]
    node _alu_io_in_A_T_3 = mux(_alu_io_in_A_T_2, pc_r, reg.io.rs1out) @[Datapath.scala 61:25]
    alu.io.in_A <= _alu_io_in_A_T_3 @[Datapath.scala 61:20]
    reg.io.ren <= cu.io.Wr_en @[Datapath.scala 63:19]
    dmem.io.fun3 <= UInt<1>("h00") @[Datapath.scala 64:22]
    node _T_3 = bits(cu.io.in, 14, 12) @[Datapath.scala 65:22]
    node _T_4 = eq(_T_3, UInt<2>("h03")) @[Datapath.scala 65:30]
    when _T_4 : @[Datapath.scala 66:9]
      dmem.io.fun3 <= cu.io.fun_3 @[Datapath.scala 67:23]
      skip @[Datapath.scala 66:9]
    dmem.io.Wr_en <= cu.io.mem_wr_en @[Datapath.scala 70:22]
    dmem.io.address <= alu.io.out @[Datapath.scala 71:25]
    dmem.io.datain <= reg.io.rs2out @[Datapath.scala 72:24]
    Bran.io.fnct3 <= cu.io.bran_fn3 @[Datapath.scala 75:22]
    cu.io.btake <= Bran.io.br_taken @[Datapath.scala 76:20]
    Bran.io.arg_x <= reg.io.rs1out @[Datapath.scala 77:22]
    Bran.io.arg_y <= reg.io.rs2out @[Datapath.scala 78:22]
    Bran.io.branch <= cu.io.bformat @[Datapath.scala 79:24]
    when cu.io.rformat : @[Datapath.scala 82:30]
      alu.io.in_B <= reg.io.rs2out @[Datapath.scala 83:24]
      skip @[Datapath.scala 82:30]
    else : @[Datapath.scala 85:19]
      alu.io.in_B <= cu.io.imm @[Datapath.scala 87:22]
      skip @[Datapath.scala 85:19]
    node _T_5 = eq(cu.io.Wr_back, UInt<1>("h00")) @[Datapath.scala 91:24]
    when _T_5 : @[Datapath.scala 92:8]
      io.out <= dmem.io.Dout @[Datapath.scala 93:15]
      skip @[Datapath.scala 92:8]
    else : @[Datapath.scala 96:8]
      node _T_6 = eq(cu.io.Wr_back, UInt<1>("h01")) @[Datapath.scala 95:31]
      when _T_6 : @[Datapath.scala 96:8]
        io.out <= alu.io.out @[Datapath.scala 97:15]
        skip @[Datapath.scala 96:8]
      else : @[Datapath.scala 100:8]
        node _T_7 = eq(cu.io.Wr_back, UInt<2>("h02")) @[Datapath.scala 99:31]
        when _T_7 : @[Datapath.scala 100:8]
          node _io_out_T = add(pc_r, UInt<3>("h04")) @[Datapath.scala 101:21]
          node _io_out_T_1 = tail(_io_out_T, 1) @[Datapath.scala 101:21]
          io.out <= _io_out_T_1 @[Datapath.scala 101:15]
          skip @[Datapath.scala 100:8]
        else : @[Datapath.scala 104:8]
          io.out <= UInt<1>("h00") @[Datapath.scala 105:15]
          skip @[Datapath.scala 104:8]
    
  module syncmem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, inst : UInt<32>}
    
    cmem sync : UInt<32>[1024] @[syncMem.scala 15:16]
    node _io_inst_T = div(io.addr, UInt<3>("h04")) @[syncMem.scala 17:36]
    node _io_inst_T_1 = bits(_io_inst_T, 9, 0) @[syncMem.scala 17:24]
    read mport io_inst_MPORT = sync[_io_inst_T_1], clock @[syncMem.scala 17:24]
    io.inst <= io_inst_MPORT @[syncMem.scala 17:11]
    
  module top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>}
    
    inst datapa of Datapath @[Topm.scala 11:20]
    datapa.clock <= clock
    datapa.reset <= reset
    inst sync of syncmem @[Topm.scala 12:18]
    sync.clock <= clock
    sync.reset <= reset
    sync.io.addr <= datapa.io.Pcout @[Topm.scala 14:15]
    datapa.io.insin <= sync.io.inst @[Topm.scala 15:19]
    io.out <= datapa.io.out @[Topm.scala 16:9]
    
